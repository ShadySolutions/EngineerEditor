<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Default_Fragment" xml:space="preserve">
    <value>#version 400
uniform vec4 Color;
in vec3 F_Vertex;
in vec3 F_Normal;
in vec3 F_TextureUV;
out vec4 FinalColor;

void main() 
{ 
	FinalColor = Color;
}</value>
  </data>
  <data name="Default_Vertex" xml:space="preserve">
    <value>#version 400
uniform mat4 ModelView;
uniform mat4 Projection;
in vec3 V_Vertex;
in vec3 V_Normal;
in vec2 V_TextureUV;
out vec3 F_Vertex;
out vec3 F_Normal;
out vec2 F_TextureUV;

void main()
{
	F_Vertex = V_Vertex;
	F_Normal = V_Normal;
	F_TextureUV = V_TextureUV;
	gl_Position = Projection * ModelView * vec4(V_Vertex, 1);
}</value>
  </data>
  <data name="Example_Fragment" xml:space="preserve">
    <value>#version 400
struct Light
{
	bool Enabled;
	vec3 Position;
	vec3 Ambient;
	vec3 Diffuse;
	vec3 Attenuation;
};
struct Material
{
	float Shininess;
	vec3 Specular;
	vec3 Ambient;
};
uniform bool EnabledTexture;
uniform bool EnabledLighting;
uniform bool EnabledFog;
uniform int ColorMethod;
uniform vec3 CameraPosition;
uniform vec4 GlobalColor;
uniform mat4 ModelView;
uniform mat4 Projection;
uniform sampler2D TextureSampler;
uniform Material CurrentMaterial;
uniform Light Lights[8];
in vec3 F_Vertex;
in vec3 F_Normal;
in vec3 F_TextureUV;
out vec4 FinalColor;

void main()
{
	FinalColor = GlobalColor;
	if (EnabledTexture) FinalColor = FinalColor * texture(TextureSampler, FragTexture);
	if (EnabledLighting)
	{
		mat3 NormalMatrix = transpose(inverse(mat3(ModelView)));
		vec3 TotalAmbient = vec3(0,0,0);
		for (int i = 0; i &lt; 8; i++)
		{
			if (Lights[i].Enabled)
			{
				if (TotalAmbient.r &lt; Lights[i].Ambient.r) TotalAmbient = Lights[i].Ambient;
			}
		}
		vec3 FinalLight = TotalAmbient;
		for (int i = 0; i &lt; 8; i++)
		{
			if (Lights[i].Enabled)
			{
				vec3 SurfacePosition = vec3(Projection * ModelView * vec4(FragVertex, 1));
				vec3 SurfaceToLight = normalize(SurfacePosition - mat3(ModelView) * Lights[i].Position);
				vec3 SurfaceToCamera = normalize(CameraPosition - SurfacePosition);
				float DistanceToLight = length(mat3(ModelView) * Lights[i].Position - SurfacePosition);
				float CurrentAttenuation = 1.0 / (Lights[i].Attenuation.x + Lights[i].Attenuation.y * DistanceToLight + Lights[i].Attenuation.z * DistanceToLight * DistanceToLight);
				FragNormal = normalize(FragNormal);
				vec3 Normal = normalize(NormalMatrix * FragNormal);
				float DiffuseCoefficient = max(0.0, dot(Normal, SurfaceToLight));
				vec3 CurrentDiffuse = DiffuseCoefficient * FinalColor.rgb * Lights[i].Diffuse;
				float SpecularCoefficient = 0.0;
				if (DiffuseCoefficient &gt; 0.0) SpecularCoefficient = pow(max(0.0, dot(SurfaceToCamera, reflect(-SurfaceToLight, Normal))), CurrentMaterial.Shininess);
				vec3 CurrentSpecular = SpecularCoefficient * CurrentMaterial.Specular * Lights[i].Diffuse;
				FinalLight = FinalLight + CurrentAttenuation*(CurrentDiffuse);// + CurrentSpecular);
			}
		}
		vec3 Gamma = vec3(1.0 / 2.2);
		FinalColor = vec4(pow(FinalLight * FinalColor.rgb, Gamma), FinalColor.a);
	}
}</value>
  </data>
  <data name="Example_Vertex" xml:space="preserve">
    <value>#version 400
uniform mat4 ModelView;
uniform mat4 Projection;
in vec3 V_Vertex;
in vec3 V_Normal;
in vec2 V_TextureUV;
out vec3 F_Vertex;
out vec3 F_Normal;
out vec2 F_TextureUV;

void main()
{
	F_Vertex = V_Vertex;
	F_Normal = V_Normal;
	F_TextureUV = V_TextureUV;
	gl_Position = Projection * ModelView * vec4(V_Vertex, 1);
}</value>
  </data>
</root>